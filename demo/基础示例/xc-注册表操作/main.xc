
#宏定义  子键路径  "xc"

函数 整型 入口函数_窗口()
	测试枚举值()
	文本型  返回内容
	正整型  返回内容整数
	文本型  exePath
	取模块文件路径(NULL, exePath)
	调试输出(exePath)

	//添加键
	整型 ret = 注册表创建键(注册表键_当前用户, "xc")
	如果 错误码_成功 != ret
		返回 0

	//置文本
	如果 假 == 注册表置文本(注册表键_当前用户, 子键路径, "main", exePath)
		返回 0
	调试输出2("置文本: ", exePath)

	//取文本
	如果 假 == 注册表取文本(注册表键_当前用户, 子键路径, "main", 返回内容)
		返回 0
	调试输出2("取文本: ", 返回内容)

	//置整数
	如果 假 == 注册表置整型(注册表键_当前用户, 子键路径, "main", 100)
		返回 0
	调试输出2("置整数: ", 100)

	//取整数
	如果 假 == 注册表取整型(注册表键_当前用户, 子键路径, "main", 返回内容整数)
		返回 0
	调试输出2("取整数: ", 返回内容整数)
	
	//删除值
	ret = 注册表删除值(注册表键_当前用户, 子键路径, "main")
	如果 错误码_成功 != ret
		返回 0

	//删除键
	ret = 注册表删除键(注册表键_当前用户, "xc")
	如果 错误码_成功 != ret
		返回 0

	返回 0

函数  测试枚举值()
	整型   ret
	HKEY  hKey
	//枚举值
	如果 错误码_成功 == 注册表打开键(注册表键_本地机器, "SOFTWARE\\7-Zip", hKey)
		整型    index = 0
		正整型  type
		文本型  name
		字节集  data
		循环 1
			ret = 注册表枚举值(hKey, index, name, data, type)
			如果 错误码_没有更多数据 == ret
				跳出
			否则 注册表值类型_字符串 == type
				调试输出(name, data.取文本指针())
			否则 注册表值类型_整型 == type
				调试输出(name, data.取整型())
			否则 注册表值类型_长整型 == type
				调试输出(name, data.取长整型())
			index++
		注册表关闭键(hKey);
