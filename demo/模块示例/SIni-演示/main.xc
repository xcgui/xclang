函数 空类型 保存配置()
	调试输出("开始保存配置")
	SIni ini
	调试输出("载入成功 ", ini.载入_从文件("配置.ini") == SIni_成功)
	ini.置文本("节名1", "文本", "文本值", "#注释")
	ini.置整型("节名1", "整型", ini.取整型("节名1", "整型") + 1)
	ini.置双浮点("节名2", "双浮点",ini.取双浮点("节名2", "双浮点") + 0.1)
	ini.置逻辑("节名2", "逻辑", 真)

	文本型 iniStr
	调试输出("另存为成功 ",ini.另存为_文本(iniStr) >= 0)
	调试输出("\n" + iniStr)
	ini.另存为_文件("配置.ini")//文件默认为UTF8-BOM编码

函数 空类型 读取配置()
	调试输出("开始读取配置")
	SIni ini
	调试输出("载入成功 ",ini.载入_从文件("配置.ini") == SIni_成功)//文件默认为UTF8-BOM编码
	调试输出("文本 ", ini.取文本("节名1", "文本", ""))
	调试输出("整型 ", ini.取整型("节名1", "整型", 0))
	调试输出("双浮点 ", ini.取双浮点("节名2", "双浮点", 0.0))
	调试输出("逻辑 ", ini.取逻辑("节名2", "逻辑", 假))

	调试输出("")
	调试输出("开始枚举")
	动态数组 < 文本型 > 节名数组 = ini.取所有节名()
	列表循环 整型  i; 节名数组
		动态数组 < 文本型 > 键名数组 = ini.取所有键名(节名数组[i])
		列表循环 整型 j; 键名数组
			调试输出("节名 ", 节名数组[i], "键名 ", 键名数组[j])
	
	
函数 整型 入口函数()
	保存配置()
	读取配置()
	返回 0
