
def void logcb(int64_t ns, LogLevel level, fmt_wstring_view location, size_t basePos,fmt_wstring_view threadName, fmt_wstring_view msg, size_t bodyPos, size_t logFilePos)
	格式打印行("日志回调被调用")


函数 整型 入口函数()
	控制台置中文编码()
	日志_置日志头格式("{YmdHMSF} {a} {s} {l}[{t}] ")
	日志_置日志回调(&logcb, 日志级别_信息)
	日志_置日志文件("2.log", 日志文件模式_截断)
	日志_启动轮询线程()
	
	字符型 randomString[] = "Hello World";
	日志_记录信息("字符串, 指针, 整数, 双浮点数: '{}', {}, {}, {}", randomString, (void*)&randomString, 512, 3.14159)
	
	日志_记录(日志级别_调试,"不会记录此消息，因为它低于当前日志级别。")
	日志_置日志级别(日志级别_调试)
	日志_记录(日志级别_调试,"现在显示调试消息")

	字节集 字节集1 {1,2,3,4}
	日志_记录(日志级别_信息, "字节集1 = {}", 字节集1)
	动态数组<整型> 数组1{1,2,3,4}
	日志_记录(日志级别_信息, "数组1 = {}", 数组1)
	字典<文本型,整型> 字典1{{"a",1},{"b",2},{"c",3}}
	日志_记录(日志级别_信息, "字典1 = {}", 字典1)

	日志_记录(日志级别_信息, "日志_记录 {}", "信息")
	日志_记录(日志级别_警告, "日志_记录 {}", "警告")
	日志_记录(日志级别_错误, "日志_记录 {}", "错误")

	计次循环 整型 i=0; 10
		日志_限制记录(1000*1000*30,日志级别_信息,"此消息将以至少 30 ms 的间隔记录: {}.", i)
		延迟(10)
	
	控制台暂停()

	返回 0
